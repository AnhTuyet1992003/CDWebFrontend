import React, { useEffect, useState } from 'react';
import axios, {post} from 'axios';
import { jwtDecode } from 'jwt-decode';
import Chatbox from './Chatbox';

import Cookies from 'js-cookie';
import Swal from 'sweetalert2';

import './user-profile-edit.css'
// Bootstrap CSS
import 'bootstrap/dist/css/bootstrap.min.css';

// jQuery (n·∫øu c·∫ßn d√πng)
import $ from 'jquery';

// Bootstrap JS (bundle includes popper.js)
import 'bootstrap/dist/js/bootstrap.bundle.min';


const UserProfileEdit = () => {
    const [user, setUser] = useState({
        fullname: '',
        //username: '',
        phone: '',
        address: '',
        birthday: '',
        avatar: ''
    });
    const [user2, setUser2] = useState({
        password: '',
        newPassword: '',
        reNewPassword: ''
    });

    const [avatarFile, setAvatarFile] = useState(null);
    const [avatarPreview, setAvatarPreview] = useState(null);
    // Khi ch·ªçn file ·∫£nh
    const handleAvatarChange = (e) => {
        const files = e.target.files;
        if (!files || files.length === 0) {
            console.log("No file selected"); // üëâ s·∫Ω kh√¥ng log d√≤ng n√†y n·∫øu ch·ªçn ƒë√∫ng
            setMessage("Vui l√≤ng ch·ªçn m·ªôt ·∫£nh h·ª£p l·ªá.");

            // Hi·ªÉn th·ªã Swal y√™u c·∫ßu ch·ªçn ·∫£nh h·ª£p l·ªá
            Swal.fire({
                icon: 'warning',
                title: '‚ö†Ô∏è Vui l√≤ng ch·ªçn m·ªôt ·∫£nh h·ª£p l·ªá.',
                confirmButtonText: 'OK',
            });
            return;
        }

        const file = files[0];
        console.log("File selected:", file); // ‚úÖ ki·ªÉm tra ƒë√∫ng file ch∆∞a

        // Ki·ªÉm tra ƒë·ªãnh d·∫°ng file (·∫£nh)
        const validImageTypes = ['image/jpeg', 'image/png', 'image/jpg'];
        if (!validImageTypes.includes(file.type)) {
            Swal.fire({
                icon: 'error',
                title: '‚ùå Ch·ªâ h·ªó tr·ª£ ·∫£nh JPEG, PNG ho·∫∑c JPG!',
                confirmButtonText: 'OK',
            });
            setMessage("Ch·ªâ h·ªó tr·ª£ ·∫£nh JPEG, PNG ho·∫∑c JPG.");
            return;
        }

        // N·∫øu ch·ªçn ƒë√∫ng ·∫£nh, l∆∞u file
        setAvatarFile(file);
        setMessage(""); // X√≥a th√¥ng b√°o l·ªói n·∫øu ch·ªçn ·∫£nh h·ª£p l·ªá

        // T·∫°o ƒë∆∞·ªùng d·∫´n ·∫£nh ƒë·ªÉ hi·ªÉn th·ªã ngay
        const previewUrl = URL.createObjectURL(file);
        setAvatarPreview(previewUrl);

        // Hi·ªÉn th·ªã th√¥ng b√°o ch·ªçn ·∫£nh th√†nh c√¥ng
        Swal.fire({
            icon: 'success',
            title: '‚úÖ ·∫¢nh ƒë√£ ƒë∆∞·ª£c ch·ªçn th√†nh c√¥ng!',
            timer: 1500,
            showConfirmButton: false,
        });
    };


    //g·ª≠i file l√™n api
    const handleUploadAvatar = async () => {
        if (!avatarFile){
            Swal.fire({
                icon: 'warning',
                title: '‚ö†Ô∏è Vui l√≤ng ch·ªçn m·ªôt ·∫£nh ƒë·ªÉ t·∫£i l√™n.',
                confirmButtonText: 'OK',
            });
            return;
        }

        // X√°c nh·∫≠n ng∆∞·ªùi d√πng c√≥ mu·ªën t·∫£i ·∫£nh kh√¥ng
        const confirmUpload = await Swal.fire({
            icon: 'question',
            title: 'B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën c·∫≠p nh·∫≠t ·∫£nh ƒë·∫°i di·ªán?',
            showCancelButton: true,
            confirmButtonText: 'T·∫£i l√™n',
            cancelButtonText: 'H·ªßy',
        });

        // N·∫øu ng∆∞·ªùi d√πng x√°c nh·∫≠n th√¨ th·ª±c hi·ªán t·∫£i ·∫£nh
        if (confirmUpload.isConfirmed) {
            const token = document.cookie
                .split('; ')
                .find(row => row.startsWith('token='))?.split('=')[1];

            const formData = new FormData();
            formData.append('file', avatarFile);
            console.log("Token t·ª´ cookie login google_avatar:", token);

            try {
                const response = await axios.post('https://localhost:8443/api/v1/users/upload-avatar', formData, {
                    headers: {
                        Authorization: `Bearer ${token}`,
                    },
                });

                // Hi·ªÉn th·ªã th√¥ng b√°o th√†nh c√¥ng
                Swal.fire({
                    icon: 'success',
                    title: '‚úÖ T·∫£i ·∫£nh l√™n th√†nh c√¥ng!',
                    text: '·∫¢nh ƒë·∫°i di·ªán ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t.',
                    timer: 2000,
                    showConfirmButton: false,
                });

                console.log('Avatar Url:', response.data.data.url);
            } catch (error) {
                console.error(error);
                Swal.fire({
                    icon: 'error',
                    title: '‚ùå L·ªói khi t·∫£i ·∫£nh',
                    text: 'C√≥ l·ªói x·∫£y ra trong qu√° tr√¨nh t·∫£i ·∫£nh. Vui l√≤ng th·ª≠ l·∫°i.',
                });
            }
        } else {
            // N·∫øu ng∆∞·ªùi d√πng h·ªßy b·ªè, hi·ªÉn th·ªã th√¥ng b√°o
            Swal.fire({
                icon: 'info',
                title: 'H·ªßy t·∫£i ·∫£nh',
                text: 'B·∫°n ƒë√£ h·ªßy vi·ªác t·∫£i ·∫£nh l√™n.',
            });
        }
    };


    const [userId, setUserId] = useState(null);
    const [message, setMessage] = useState('');

    // Load user info from token
    useEffect(() => {
        // const token = document.cookie
        //     .split('; ')
        //     .find(row => row.startsWith('token='))
        //     ?.split('=')[1];
        const token = localStorage.getItem('accessToken');
            // Cookies.get('token');

        console.log("token profile: "+token)


        if (!token) {
            setMessage('B·∫°n ch∆∞a ƒëƒÉng nh·∫≠p');
            return;
        }

        const decoded = jwtDecode(token);
        const username = decoded.sub;

        axios.post(`https://localhost:8443/api/v1/users/details`, {}, {
            headers: {
                Authorization: `Bearer ${token}`,
            },
            withCredentials: true,
        })
            .then(res => {
                const userData = res.data;
                const formattedBirthday = userData.birthday + "T00:00:00"; // gh√©p th√™m gi·ªù ph√∫t gi√¢y
                setUser({
                    fullname: userData.fullname || '',
                    //username: userData.username || '',
                    phone: userData.phone || '',
                    address: userData.address || '',
                    birthday: userData.formattedBirthday || '',
                    avatar: userData.avatar || 'https://res.cloudinary.com/dorz7ucva/image/upload/v1745202292/image_2820bc603a47efcf17a0806b81ca92bff7ea2905.png'
                });
                setUserId(userData.id);
                console.log(userData.avatar); // ƒê√∫ng
            })
            .catch(err => {
                console.error(err);
                setMessage('L·ªói khi t·∫£i th√¥ng tin ng∆∞·ªùi d√πng');
            });

        //chat tu dong
        console.log('‚úÖ Chatbox script loaded');
        const script = document.createElement('script');
         script.src = 'https://app.tudongchat.com/js/chatbox.js';
        //script.src = 'C:\\Users\\ADMIN\\eclipse-workspace\\CDWebFrontend\\src\\assets\\user\\js\\chatbox.js'
        script.async = true;

        script.onload = () => {
            console.log('‚úÖ Chatbox script loaded');
            if (window.TuDongChat) {
                const tudong_chatbox = new window.TuDongChat('GEKBdJuf_t2KzMXWnR9hH');
                tudong_chatbox.initial();
                console.log('‚úÖ Chatbox initialized');
            } else {
                console.error('‚ùå TuDongChat not available');
            }
        };

        script.onerror = () => {
            console.error('‚ùå Failed to load chatbox.js');
        };

        document.body.appendChild(script);

        return () => {
            document.body.removeChild(script);
        };
    }, []);

    const handleChange = (e) => {
        const { name, value } = e.target;
        setUser(prev => ({ ...prev, [name]: value }));
    };



    const handleUpdate = async (e) => {
        e.preventDefault();

        // const token = document.cookie
        //     .split('; ')
        //     .find(row => row.startsWith('token='))
        //     ?.split('=')[1];
        const token = localStorage.getItem('accessToken');


        try {
            const res = await axios.put(
                `https://localhost:8443/api/v1/users/details/${userId}`,
                user,
                {
                    headers: {
                        Authorization: `Bearer ${token}`,
                    },
                    withCredentials: true,
                }
            );
            setMessage('C·∫≠p nh·∫≠t th√¥ng tin th√†nh c√¥ng!');
        } catch (error) {
            console.error(error);

            // Ki·ªÉm tra l·ªói t·ª´ response
            if (error.response && error.response.data) {
                // N·∫øu c√≥ l·ªói t·ª´ backend, l·∫•y th√¥ng ƒëi·ªáp t·ª´ response v√† hi·ªÉn th·ªã
                setMessage(error.response.data);  // Hi·ªÉn th·ªã th√¥ng ƒëi·ªáp l·ªói t·ª´ backend
            } else {
                // N·∫øu kh√¥ng c√≥ l·ªói response, hi·ªÉn th·ªã th√¥ng b√°o chung
                setMessage('L·ªói khi c·∫≠p nh·∫≠t th√¥ng tin');
            }
        }
    };
    const [errors, setErrors] = useState({});

    const validateForm = () => {
        const newErrors = {};
        const passwordRegex = /^(?=.*[A-Za-z])(?=.*\d)[A-Za-z\d]{7,}$/;

        if (!user2.password) {
            newErrors.password = 'Vui l√≤ng nh·∫≠p m·∫≠t kh·∫©u.';
        } else if (!passwordRegex.test(user2.password)) {
            newErrors.password = 'M·∫≠t kh·∫©u √≠t nh·∫•t 7 k√Ω t·ª±, bao g·ªìm ch·ªØ v√† s·ªë.';
        }

        if (!user2.newPassword) {
            newErrors.newPassword = 'Vui l√≤ng nh·∫≠p m·∫≠t kh·∫©u.';
        } else if (!passwordRegex.test(user2.passnewPasswordword)) {
            newErrors.newPassword = 'M·∫≠t kh·∫©u √≠t nh·∫•t 7 k√Ω t·ª±, bao g·ªìm ch·ªØ v√† s·ªë.';
        }

        if (!user2.reNewPassword) {
            newErrors.retypePassword = 'Vui l√≤ng nh·∫≠p l·∫°i m·∫≠t kh·∫©u.';
        } else if (user2.newPassword !== user2.reNewPassword) {
            newErrors.retypePassword = 'M·∫≠t kh·∫©u kh√¥ng kh·ªõp.';
        }
        return newErrors;
    };
    const handleUpdatePassword = async (e) => {
        e.preventDefault();
        const validationErrors = validateForm();
        setErrors(validationErrors);

        // const token = document.cookie
        //     .split('; ')
        //     .find(row => row.startsWith('token='))
        //     ?.split('=')[1];
        const token = localStorage.getItem('accessToken');


        try {
            const res = await axios.put(
                `https://localhost:8443/api/v1/users/changePassword/${userId}`,
                user2,
                {
                    headers: {
                        Authorization: `Bearer ${token}`,
                    },
                    withCredentials: true,
                }
            );
            setMessage('C·∫≠p nh·∫≠t th√¥ng tin th√†nh c√¥ng!');
        } catch (error) {
            console.error(error);

            // Ki·ªÉm tra l·ªói t·ª´ response
            if (error.response && error.response.data) {
                // N·∫øu c√≥ l·ªói t·ª´ backend, l·∫•y th√¥ng ƒëi·ªáp t·ª´ response v√† hi·ªÉn th·ªã
                setMessage(error.response.data);  // Hi·ªÉn th·ªã th√¥ng ƒëi·ªáp l·ªói t·ª´ backend
            } else {
                // N·∫øu kh√¥ng c√≥ l·ªói response, hi·ªÉn th·ªã th√¥ng b√°o chung
                setMessage('L·ªói khi c·∫≠p nh·∫≠t th√¥ng tin');
            }
        }
    };

    return (
        <>
            <div className="information">
                <div className="max-w-xl mx-auto mt-10 bg-white shadow-md p-6 rounded-xl">
                    <h2 className="text-xl font-bold mb-4">C·∫≠p nh·∫≠t th√¥ng tin ng∆∞·ªùi d√πng</h2>
                    {message && <div className="mb-4 text-red-500">{message}</div>}
                    <form onSubmit={handleUpdate} className="space-y-4">
                        <input type="text" name="fullname" value={user.fullname} onChange={handleChange}
                               placeholder="H·ªç t√™n"
                               className="w-full p-2 border rounded"/>
                        {/*<input type="text" name="username" value={user.username} onChange={handleChange}*/}
                        {/*       placeholder="T√™n ƒëƒÉng nh·∫≠p" className="w-full p-2 border rounded"/>*/}
                        <input type="text" name="phone" value={user.phone} onChange={handleChange}
                               placeholder="S·ªë ƒëi·ªán tho·∫°i"
                               className="w-full p-2 border rounded"/>
                        <input type="text" name="address" value={user.address} onChange={handleChange}
                               placeholder="ƒê·ªãa ch·ªâ"
                               className="w-full p-2 border rounded"/>
                        <input type="date" name="birthday" value={user.birthday} onChange={handleChange}
                               className="w-full p-2 border rounded"/>
                        <button type="submit" className="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600">L∆∞u
                            thay
                            ƒë·ªïi
                        </button>
                    </form>
                </div>
            </div>


            <div className="containerEdit light-style flex-grow-1 container-p-y">

                <h4 className="font-weight-bold py-3 mb-4">
                    Ch·ªânh s·ª≠a th√¥ng tin c√° nh√¢n
                </h4>

                <div className="card overflow-hidden">
                    <div className="row no-gutters row-bordered row-border-light">
                        <div className="col-md-3 pt-0">
                            <div className="list-group list-group-flush account2-settings-links">
                                <a className="list-group-item list-group-item-action active" data-toggle="list"
                                   href="#account2-general">Th√¥ng tin c√° nh√¢n</a>
                                <a className="list-group-item list-group-item-action" data-toggle="list"
                                   href="#account2-change-password">ƒê·ªïi m·∫≠t kh·∫©u</a>
                                <a className="list-group-item list-group-item-action" data-toggle="list"
                                   href="#account2-info">Th√¥ng tin chung</a>
                                <a className="list-group-item list-group-item-action" data-toggle="list"
                                   href="#account2-social-links">Social links</a>
                                <a className="list-group-item list-group-item-action" data-toggle="list"
                                   href="#account2-connections">Connections</a>
                                <a className="list-group-item list-group-item-action" data-toggle="list"
                                   href="#account2-notifications">Notifications</a>
                            </div>
                        </div>
                        <div className="col-md-9">
                            <div className="tab-content">
                                <div className="tab-pane fade active show" id="account2-general">

                                    <div className="card2-body media align-items-center">
                                        <img
                                            src={avatarPreview || user.avatar} // N·∫øu c√≥ ·∫£nh preview th√¨ hi·ªÉn th·ªã, kh√¥ng th√¨ hi·ªÉn th·ªã ·∫£nh m·∫∑c ƒë·ªãnh
                                            alt="Avatar"
                                            className="d-block ui-w-80"
                                        />
                                        <div className="media-body ml-4">
                                            <label className="btn btn-outline-primary upload-photo-label">
                                                T·∫£i h√¨nh m·ªõi l√™n
                                                <input
                                                    type="file"
                                                    accept="image/*"
                                                    className="account2-settings-fileinput"
                                                    onChange={handleAvatarChange}
                                                    // style={{display: "none"}}
                                                />
                                            </label> &nbsp;
                                            <button type="button"
                                                    className="btn btn-default md-btn-flat"
                                                    onClick={handleUploadAvatar}>T·∫£i ·∫£nh
                                            </button>

                                            <div className="text-light small mt-1">Cho ph√©p JPG, GIF ho·∫∑c PNG. K√≠ch
                                                th∆∞·ªõc t·ªëi ƒëa l√†
                                                800K
                                            </div>
                                        </div>
                                    </div>
                                    <br></br>
                                    <hr className="border-light m-0"/>

                                    <div className="card-body">
                                    <div className="form-group">
                                            <label className="form-label">Username</label>
                                            <input type="text" className="form-control mb-1"/>
                                        </div>
                                        <div className="form-group">
                                            <label className="form-label">T√™n</label>
                                            <input type="text" className="form-control" value="Nelle Maxwell"/>
                                        </div>
                                        <div className="form-group">
                                            <label className="form-label">Email</label>
                                            <input type="text" className="form-control mb-1" value="nmaxwell@mail.com"/>
                                            <div className="alert alert-warning mt-3">
                                                Your email is not confirmed. Please check your inbox.<br/>
                                                <a href="javascript:void(0)">Resend confirmation</a>
                                            </div>
                                        </div>
                                        <div className="form-group">
                                            <label className="form-label">S·ªë ƒëi·ªán tho·∫°i</label>
                                            <input type="tel" className="form-control" pattern="[0-9]+"/>
                                        </div>
                                    </div>

                                </div>
                                <div className="tab-pane fade" id="account2-change-password">
                                    <form onSubmit={handleUpdatePassword} className="space-y-4">
                                        <div className="card2-body pb-2">

                                            {errors.password && (
                                                <div className="error-container">
                                                    <small className="error">{errors.password}</small>
                                                </div>
                                            )}
                                            <div className="form-group">
                                                <label className="form-label">Current password</label>
                                                <input type="password" name="password" value={user2.password}
                                                       onChange={handleChange}
                                                       required={true} className="form-control"/>
                                            </div>
                                            {errors.newPassword && (
                                                <div className="error-container">
                                                    <small className="error">{errors.newPassword}</small>
                                                </div>
                                            )}

                                            <div className="form-group">
                                                <label className="form-label">New password</label>
                                                <input type="password" name="newPassword" value={user2.newPassword}
                                                       onChange={handleChange}
                                                       required={true} className="form-control"/>
                                            </div>
                                            {errors.reNewPassword && (
                                                <div className="error-container">
                                                    <small className="error">{errors.reNewPassword}</small>
                                                </div>
                                            )}

                                            <div className="form-group">
                                                <label className="form-label">Repeat new password</label>
                                                <input type="password" name="reNewPassword" value={user2.reNewPassword}
                                                       onChange={handleChange} required={true}
                                                       className="form-control"/>
                                            </div>
                                            {errors.password && (
                                                <div className="error-container">
                                                    <small className="error">{errors.password}</small>
                                                </div>
                                            )}

                                            <div className="text-right mt-3">
                                                <button type="submit" className="btn btn-primary">Save changes</button>
                                                &nbsp;
                                                <button type="button" className="btn btn-default">Cancel</button>
                                            </div>

                                        </div>
                                    </form>
                                </div>
                                <div className="tab-pane fade" id="account2-info">
                                    <div className="card2-body pb-2">

                                        <div className="form-group">
                                            <label className="form-label">Bio</label>
                                            <textarea className="form-control" rows="5">Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris nunc arcu, dignissim sit amet sollicitudin iaculis, vehicula id urna. Sed luctus urna nunc. Donec fermentum, magna sit amet rutrum pretium, turpis dolor molestie diam, ut lacinia diam risus eleifend sapien. Curabitur ac nibh nulla. Maecenas nec augue placerat, viverra tellus non, pulvinar risus.</textarea>
                                        </div>
                                        <div className="form-group">
                                            <label className="form-label">Birthday</label>
                                            <input type="text" className="form-control" value="May 3, 1995"/>
                                        </div>
                                        <div className="form-group">
                                            <label className="form-label">Country</label>
                                            <select className="custom-select">
                                                <option>USA</option>
                                                <option selected="">Canada</option>
                                                <option>UK</option>
                                                <option>Germany</option>
                                                <option>France</option>
                                            </select>
                                        </div>


                                    </div>
                                    <hr className="border-light m-0"/>
                                    <div className="card2-body pb-2">

                                        <h6 className="mb-4">Contacts</h6>
                                        <div className="form-group">
                                            <label className="form-label">Phone</label>
                                            <input type="text" className="form-control" value="+0 (123) 456 7891"/>
                                        </div>
                                        <div className="form-group">
                                            <label className="form-label">Website</label>
                                            <input type="text" className="form-control" value=""/>
                                        </div>

                                    </div>

                                </div>
                                <div className="tab-pane fade" id="account2-social-links">
                                    <div className="card2-body pb-2">

                                        <div className="form-group">
                                            <label className="form-label">Twitter</label>
                                            <input type="text" className="form-control"
                                                   value="https://twitter.com/user"/>
                                        </div>
                                        <div className="form-group">
                                            <label className="form-label">Facebook</label>
                                            <input type="text" className="form-control"
                                                   value="https://www.facebook.com/user"/>
                                        </div>
                                        <div className="form-group">
                                            <label className="form-label">Google+</label>
                                            <input type="text" className="form-control" value=""/>
                                        </div>
                                        <div className="form-group">
                                            <label className="form-label">LinkedIn</label>
                                            <input type="text" className="form-control" value=""/>
                                        </div>
                                        <div className="form-group">
                                            <label className="form-label">Instagram</label>
                                            <input type="text" className="form-control"
                                                   value="https://www.instagram.com/user"/>
                                        </div>

                                    </div>
                                </div>
                                <div className="tab-pane fade" id="account2-connections">
                                    <div className="card2-body">
                                        <button type="button" className="btn btn-twitter">Connect
                                            to <strong>Twitter</strong></button>
                                    </div>
                                    <hr className="border-light m-0"/>
                                    <div className="card2-body">
                                        <h5 className="mb-2">
                                            <a href="javascript:void(0)" className="float-right text-muted text-tiny"><i
                                                className="ion ion-md-close"></i> Remove</a>
                                            <i className="ion ion-logo-google text-google"></i>
                                            You are connected to Google:
                                        </h5>
                                        <a href="/cdn-cgi/l/email-protection" className="__cf_email__"
                                           data-cfemail="6c02010d141b0900002c010d0500420f0301">[email&#160;protected]</a>
                                    </div>
                                    <hr className="border-light m-0"/>
                                    <div className="card2-body">
                                        <button type="button" className="btn btn-facebook">Connect
                                            to <strong>Facebook</strong></button>
                                    </div>
                                    <hr className="border-light m-0"/>
                                    <div className="card2-body">
                                        <button type="button" className="btn btn-instagram">Connect
                                            to <strong>Instagram</strong></button>
                                    </div>
                                </div>
                                <div className="tab-pane fade" id="account2-notifications">
                                    <div className="card2-body pb-2">

                                        <h6 className="mb-4">Activity</h6>

                                        <div className="form-group">
                                            <label className="switcher">
                                                <input type="checkbox" className="switcher-input" checked=""/>
                                                <span className="switcher-indicator">
                      <span className="switcher-yes"></span>
                      <span className="switcher-no"></span>
                    </span>
                                                <span className="switcher-label">Email me when someone comments on my article</span>
                                            </label>
                                        </div>
                                        <div className="form-group">
                                            <label className="switcher">
                                                <input type="checkbox" className="switcher-input" checked=""/>
                                                <span className="switcher-indicator">
                      <span className="switcher-yes"></span>
                      <span className="switcher-no"></span>
                    </span>
                                                <span className="switcher-label">Email me when someone answers on my forum thread</span>
                                            </label>
                                        </div>
                                        <div className="form-group">
                                            <label className="switcher">
                                                <input type="checkbox" className="switcher-input"/>
                                                <span className="switcher-indicator">
                      <span className="switcher-yes"></span>
                      <span className="switcher-no"></span>
                    </span>
                                                <span className="switcher-label">Email me when someone follows me</span>
                                            </label>
                                        </div>
                                    </div>
                                    <hr className="border-light m-0"/>
                                    <div className="card2-body pb-2">

                                        <h6 className="mb-4">Application</h6>

                                        <div className="form-group">
                                            <label className="switcher">
                                                <input type="checkbox" className="switcher-input" checked=""/>
                                                <span className="switcher-indicator">
                      <span className="switcher-yes"></span>
                      <span className="switcher-no"></span>
                    </span>
                                                <span className="switcher-label">News and announcements</span>
                                            </label>
                                        </div>
                                        <div className="form-group">
                                            <label className="switcher">
                                                <input type="checkbox" className="switcher-input"/>
                                                <span className="switcher-indicator">
                      <span className="switcher-yes"></span>
                      <span className="switcher-no"></span>
                    </span>
                                                <span className="switcher-label">Weekly product updates</span>
                                            </label>
                                        </div>
                                        <div className="form-group">
                                            <label className="switcher">
                                                <input type="checkbox" className="switcher-input" checked=""/>
                                                <span className="switcher-indicator">
                      <span className="switcher-yes"></span>
                      <span className="switcher-no"></span>
                    </span>
                                                <span className="switcher-label">Weekly blog digest</span>
                                            </label>
                                        </div>

                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <div className="text-right mt-3">
                    <button type="button" className="btn btn-primary">Save changes</button>
                    &nbsp;
                    <button type="button" className="btn btn-default">Cancel</button>
                </div>

            </div>


            {/*<div><Chatbox/></div>*/}

        </>
    );
};

export default UserProfileEdit;
